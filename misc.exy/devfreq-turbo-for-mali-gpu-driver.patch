diff --git a/drivers/devfreq/devfreq.c b/drivers/devfreq/devfreq.c
index 141413067b5c..ed9b89934e22 100644
--- a/drivers/devfreq/devfreq.c
+++ b/drivers/devfreq/devfreq.c
@@ -314,6 +314,13 @@ int update_devfreq(struct devfreq *devfreq)
 	if (err)
 		return err;
 
+	/*
+	 * If turbo is enabled, transition to maximum freq, i.e. behave
+	 * like under the performance governor.
+	 */
+	if (devfreq->turbo_refcount)
+		freq = UINT_MAX;
+
 	/*
 	 * Adjust the frequency with user freq, QoS and available freq.
 	 *
@@ -847,6 +854,65 @@ void devm_devfreq_remove_device(struct device *dev, struct devfreq *devfreq)
 }
 EXPORT_SYMBOL(devm_devfreq_remove_device);
 
+/**
+ * devfreq_turbo_get() - Increment the turbo usage counter
+ * @devfreq:	the devfreq instance for which turbo should be enabled
+ *
+ * If turbo usage count is non-zero, the DevFreq devices transitions
+ * into its highest OPP state.
+ */
+int devfreq_turbo_get(struct devfreq *devfreq)
+{
+	int ret;
+
+	if (!devfreq)
+		return -EINVAL;
+
+	mutex_lock(&devfreq->lock);
+
+	devfreq->turbo_refcount += 1;
+	if (devfreq->turbo_refcount >= 2) {
+		ret = 0;
+		goto out;
+	}
+
+	ret = update_devfreq(devfreq);
+
+out:
+	mutex_unlock(&devfreq->lock);
+	return ret;
+}
+EXPORT_SYMBOL(devfreq_turbo_get);
+
+/**
+ * devfreq_turbo_put() - Decrement the turbo usage counter
+ * @devfreq:	the devfreq instance for which turbo should be disabled
+ *
+ * Counterpart to devfreq_turbo_get().
+ */
+int devfreq_turbo_put(struct devfreq *devfreq)
+{
+	int ret;
+
+	if (!devfreq)
+		return -EINVAL;
+
+	mutex_lock(&devfreq->lock);
+
+	devfreq->turbo_refcount -= 1;
+	if (devfreq->turbo_refcount >= 1) {
+		ret = 0;
+		goto out;
+	}
+
+	ret = update_devfreq(devfreq);
+
+out:
+	mutex_unlock(&devfreq->lock);
+	return ret;
+}
+EXPORT_SYMBOL(devfreq_turbo_put);
+
 /**
  * devfreq_suspend_device() - Suspend devfreq of a device.
  * @devfreq: the devfreq instance to be suspended
diff --git a/include/linux/devfreq.h b/include/linux/devfreq.h
index e4963b0f45da..a4dfacca6672 100644
--- a/include/linux/devfreq.h
+++ b/include/linux/devfreq.h
@@ -156,6 +156,8 @@ struct devfreq {
 	struct notifier_block nb;
 	struct delayed_work work;
 
+	unsigned int turbo_refcount;
+
 	unsigned long previous_freq;
 	struct devfreq_dev_status last_status;
 
@@ -194,6 +196,9 @@ extern struct devfreq *devm_devfreq_add_device(struct device *dev,
 extern void devm_devfreq_remove_device(struct device *dev,
 				  struct devfreq *devfreq);
 
+extern int devfreq_turbo_get(struct devfreq *devfreq);
+extern int devfreq_turbo_put(struct devfreq *devfreq);
+
 /* Supposed to be called by PM callbacks */
 extern int devfreq_suspend_device(struct devfreq *devfreq);
 extern int devfreq_resume_device(struct devfreq *devfreq);
@@ -314,6 +319,16 @@ static inline void devm_devfreq_remove_device(struct device *dev,
 {
 }
 
+static inline int devfreq_turbo_get(struct devfreq *devfreq)
+{
+	return 0;
+}
+
+static inline int devfreq_turbo_put(struct devfreq *devfreq)
+{
+	return 0;
+}
+
 static inline int devfreq_suspend_device(struct devfreq *devfreq)
 {
 	return 0;
